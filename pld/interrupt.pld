/*++									*/
/* interrupt.pld - Spare Time Gizmos SBCT11 Interrupt Request GAL	*/
/*									*/
/*   Copyright (C) 2021 by Robert Armstrong, Milpitas, California.	*/
/*									*/
/*  This program is free software; you can redistribute it and/or	*/
/* modify it under the terms of the GNU General Public License as	*/
/* published by the Free Software Foundation; either version 2 of the	*/
/* License, or (at your option) any later version.			*/
/*									*/
/*  This program is distributed in the hope that it will be useful, but	*/
/* WITHOUT ANY WARRANTY; without even the implied warranty of		*/
/* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU	*/
/* General Public License for more details.				*/
/*									*/
/*   You should have received a copy of the GNU General Public License	*/
/* along with this program; if not, write to the Free Software		*/
/* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 USA.	*/
/*                                                                      */
/* DESCRIPTION								*/
/*  The interrupt request GAL is essentially a specialized priority 	*/
/* encoder that takes all the interrupt requests, encodes the highest	*/
/* priority one, and drives the DCT11 CPn, PF and HALT inputs.  It can	*/
/* all be summarized by this table -					*/
/*									*/
/*	REQUEST		PRIO	CP0 CP1 CP2 CP3 PF  HALT    VECTOR	*/
/*	-------------   ----    ------------------------    ------	*/
/*	NXM TRAP REQ	 -	 -   -   -   -   -   1	    RESTART	*/
/*	HALT REQ	 -	 -   -   -   -   -   1	    RESTART	*/
/*	SLU0 BREAK	 -	 -   -   -   -   -   1	    RESTART	*/
/*	PF REQ		 -	 -   -   -   -   1   0	      24	*/
/*	LTC IRQ		 6	 1   1   0   1   0   0       100	*/
/*	SLU1 RCV IRQ	 5       1   1   1   0   0   0       120	*/
/*	SLU1 XMT IRQ	 5       0   1   1   0   0   0       124	*/
/*	PPI IRQ		 5       1   0   1   0   0   0       130	*/
/*	SPARE IRQ	 5       0   0   1   0   0   0       134	*/
/*	SLU0 RCV IRQ	 4       1   1   0   0   0   0        60	*/
/*	SLU0 XMT IRQ	 4       0   1   0   0   0   0        64	*/
/*	IDE IRQ		 4       1   0   0   0   0   0        70	*/
/*									*/
/*   Note that the power fail (PF) and HALT inputs are handled outside	*/
/* this GAL.  The SBCT11 doesn't use PF however it's available on the	*/
/* expansion connector, and all it requires is a three state driver.	*/
/* HALT is simply the OR of the three sources listed above, so that one	*/
/* needs an OR gate and then a three state driver.   	       	    	*/
/*									*/
/* REVISION HISTORY							*/
/* 28-APR-21	RLA	New file.					*/
/* 15-AUG-25	RLA	Clean up vector logic.  Add MIN CP = 4.		*/
/*--									*/
NAME		INTERRUPT;
PARTNO		INTERRUPT;
REVISION	B;
DATE		08/15/25;
DESIGNER	Robert Armstrong;
COMPANY		Spare Time Gizmos;
ASSEMBLY	SBCT11;
LOCATION	U14;
DEVICE		G16V8;
$INCLUDE VECTORS.INC

/* INPUTS... */
Pin  2 =  LTC_IRQ;	/* 60Hz line time clock tick			*/
Pin  3 =  SLU0_RCVIRQ;	/* DLART #1 receive interrupt request		*/
Pin  4 =  SLU0_XMTIRQ;	/*   "    " transmit  "    "     "		*/
Pin  5 =  SLU1_RCVIRQ;	/*   "   #2 receive   "    "     "		*/
Pin  6 =  SLU1_XMTIRQ;	/*   "    " transmit  "    "     "		*/
Pin  7 = !IDE_IRQ;	/* IDE disk interrupt request			*/
Pin  8 =  PPI_IRQ;	/* 82C55 PPI interrupt request			*/
Pin  9 = !SPARE_IRQ;	/* "spare" IRQ from bus/expansion connector	*/
Pin 11 =  ASPI;		/* DCT11 assert priority in strobe		*/
/* Pin 1 unused */

/* OUTPUTS... */
Pin 18 = !CP0;		/* encoded interrupt request inputs to DCT11	*/
Pin 17 = !CP1;		/*  "   "    "    "     "      "    "    "	*/
Pin 16 = !CP2;		/*  "   "    "    "     "      "    "    "	*/
Pin 15 = !CP3;		/*  "   "    "    "     "      "    "    "	*/
PIn 14 = LED2;		/* temporary to reduce pterms for IRQ_LED	*/
Pin 13 =  IRQ_LED;	/* LED driver for "any interrupt active"	*/
Pin 12 = !ASPI_OUT;	/* inverted ASPI signal for HALT/PF driver	*/
/* Pins 14, 19 unused */

/*   The DCT11 CP inputs are multiplexed with the DRAM refresh address	*/
/* outputs and, even though DRAM isn't used in this design, we can only	*/
/* enable the CP outputs when ASPI is asserted.				*/
FIELD CP = [CP3..0];
CP.oe = ASPI;
MIN CP = 4;

/*   This field determines the order of the request inputs for the 	*/
/* priority encoder below.  In theory the order is arbitrary, but it's	*/
/* convenient to have the inputs sorted in priority order.  The DCT11 	*/
/* has four implied priority levels, 4 thru 7.  Level 7 we use only for	*/
/* the power fail interrupt and the remaining ones are distributed over	*/
/* levels 4 thru 6. BTW, be CAREFUL if you make any alterations to this	*/
/* field - it needs to correspond to the bitmaps in the table below!	*/
FIELD IRQs = [
  LTC_IRQ,					/* priority 6 */
  SLU1_RCVIRQ, SLU1_XMTIRQ, PPI_IRQ, SPARE_IRQ,	/* priority 5 */
  SLU0_RCVIRQ, SLU0_XMTIRQ, IDE_IRQ		/* priority 4 */
];

/*   This table translates the highest priority input into the matching	*/
/* CP outputs for the DCT11.  These CP outputs determine the vector	*/
/* that will ultimately be taken ...					*/
TABLE IRQs => CP {
  'b'1xxxxxxx => VEC100;	/* line time clock			*/
  'b'01xxxxxx => VEC120;	/* SLU1 (TU58) receive			*/
  'b'001xxxxx => VEC124;	/* SLU1 (TU58) transmit			*/
  'b'0001xxxx => VEC130;	/* parallel interface (8255 PPI)	*/
  'b'00001xxx => VEC134;	/* spare interrupt			*/
  'b'000001xx => VEC060;	/* SLU0 (console) receive		*/
  'b'0000001x => VEC064;	/* SLU0 (console) transmit		*/
  'b'00000001 => VEC070;	/* IDE/ATA disk drive			*/
  'b'00000000 => VECNONE;	/* no interrupt				*/
}

/*   The IRQ_LED output is used to drive a single "interrupt requested"	*/
/* LED.  It's asserted whenever any interrupt request is active, except	*/
/* HALT and PF of course.	    	      	      	 	 	*/
IRQ_LED = !(IRQs:'b'00000000);

/*   ASPI_OUT is just an inverted copy of ASPI and it's used to enable	*/
/* the 74HC367 buffers for the HALT and PF inputs to the DCT11. And BTW	*/
/* the actual inversion is handled by couple because of the active low	*/
/* pin definition for ASPI_OUT!						*/
ASPI_OUT = ASPI;
